version: '3.8'

services:
  backend:
    container_name: expenses_prod_backend
    build:
      context: ./backend
      dockerfile: ../.docker/backend/Dockerfile
    ports:
      - "8890:8080"
    depends_on:
      - mysql
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${ENV}
    volumes:
      - ./backend/src:/app/src
    networks:
      - expenses_prod_network

  frontend:
    container_name: expenses_prod_frontend
    build:
      context: ./frontend
      dockerfile: ../.docker/frontend/Dockerfile
    ports:
      - "8898:4200"
    environment:
      - HOST=expenses.smartvizz.com
    command: npm start
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - ./.env:/app/.env
      - expenses_prod_node_modules:/app/node_modules
    networks:
      - expenses_prod_network

  mysql:
    container_name: expenses_prod_mysql
    build:
      context: .
      dockerfile: ./.docker/mysql/Dockerfile
    restart: always
    ports:
      - "3316:3306"
    hostname: mysql
    env_file:
      - .env
    volumes:
      - expenses_prod_db_data:/var/lib/mysql
      - ./.docker/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./.docker/mysql/dump:/docker-entrypoint-initdb.d
    networks:
      - expenses_prod_network

  phpmyadmin:
    container_name: expenses_prod_phpmyadmin
    build:
      context: .
      dockerfile: ./.docker/phpmyadmin/Dockerfile
      args:
        PMA_ABSOLUTE_URI: "https://expenses.smartvizz.com/phpmyadmin/"
    depends_on:
      - mysql
    ports:
      - "8091:80"
    env_file:
      - .env
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    networks:
      - expenses_prod_network

  nginx:
    container_name: expenses_prod_nginx
    build:
      context: .
      dockerfile: ./.docker/nginx/Dockerfile
    volumes:
      - ./.docker/nginx/conf.d:/etc/nginx/conf.d
      - ./.docker/certbot/conf:/etc/letsencrypt
      - ./.docker/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - expenses_prod_network

  certbot:
    container_name: expenses_prod_certbot
    build:
      context: .
      dockerfile: ./.docker/certbot/Dockerfile
    volumes:
      - ./.docker/certbot/conf:/etc/letsencrypt
      - ./.docker/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    networks:
      - expenses_prod_network

networks:
  expenses_prod_network:

volumes:
  expenses_prod_node_modules:
  expenses_prod_db_data:
    name: expenses_prod_db_data
